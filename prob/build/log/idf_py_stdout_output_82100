[1/11] Performing build step for 'bootloader'
[1/1] cd /home/raesangur/github/UdeS_S6_APP4/prob/build/bootloader/esp-idf/esptool_py && /home/raesangur/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/raesangur/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/raesangur/github/UdeS_S6_APP4/prob/build/bootloader/bootloader.bin
Bootloader binary size 0x68a0 bytes. 0x760 bytes (7%) free.
[2/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/manchester.c.obj
[3/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/timer.c.obj
[4/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/gpio.c.obj
[5/9] Linking C static library esp-idf/main/libmain.a
[6/9] Generating ld/sections.ld
[7/9] Linking CXX executable APP4.elf
[8/9] Generating binary image from built executable
esptool.py v4.6.2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/raesangur/github/UdeS_S6_APP4/prob/build/APP4.bin
[9/9] cd /home/raesangur/github/UdeS_S6_APP4/prob/build/esp-idf/esptool_py && /home/raesangur/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/raesangur/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/raesangur/github/UdeS_S6_APP4/prob/build/partition_table/partition-table.bin /home/raesangur/github/UdeS_S6_APP4/prob/build/APP4.bin
APP4.bin binary size 0x2b930 bytes. Smallest app partition is 0x100000 bytes. 0xd46d0 bytes (83%) free.
